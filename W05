Meetings Minutes

Design Document
Date: 02/08/2024 Time: 9:00 a.m. MST Location: Zoom

Attendees:
•	Front End Team
•	Back End Team
•	Database Team

Agenda:
1.	Design Document
2.	Architecture

Discussion Points:
1. Agenda Item 1:
•	Discussion: Discuss the current state of the design document, including its completeness, clarity, and adherence to established design principles and standards.
•	Identify any areas of ambiguity, inconsistency, or potential improvement in the design document.
•	Discuss any feedback or concerns raised by team members regarding the design document.
•	Action Items:
•	Review of the design document and identify any gaps or areas requiring clarification.
•	Update the design document to address any feedback or suggestions provided during the meeting.
•	Follow-up meeting to review the revised design document and finalize any outstanding issues or concerns.
2. Agenda Item 2:
•	Discussion: Review the current backend architecture proposed for the Community Board App.
•	Evaluate the scalability, performance, and maintainability aspects of the proposed architecture.
•	Discuss any potential bottlenecks, security concerns, or architectural trade-offs associated with the chosen approach.
•	Explore alternative architectures or technologies that may better align with the project requirements and long-term vision.
•	Consider feedback and input from team members regarding their experiences and expertise in backend development.
•	Action Items:
•	Conduct a detailed analysis of the scalability requirements for the Community Board App and propose any necessary adjustments to the backend architecture.
•	Investigate potential security vulnerabilities in the current backend architecture and recommend measures to mitigate risks.
•	Research alternative database solutions that may better suit the data storage and retrieval needs of the Community Board App.
Decisions Made:
•	Decision 1: Agreed upon the Agile development methodology for the project, emphasizing iterative development cycles and continuous feedback loops.


•	Decision 2: Assigned team leads for each major component of the software architecture to ensure clear ownership and accountability.
Next Meeting:
•	Date: 02/12/2024
•	Time: 3:15 PM MST

Training Notes

1.	What advantages as a developer does TDD provide?
a.	Improved Code Quality:
•	TDD encourages developers to write cleaner, more modular, and maintainable code by focusing on the desired behavior of the system from the outset.
b.	Faster Feedback Loop:
•	With TDD, developers receive immediate feedback on the correctness of their code, allowing them to catch and fix defects early in the development process.
c.	Enhanced Design:
•	TDD promotes better software design by forcing developers to think about the interface and interactions between different components before writing the actual code.
d.	Increased Confidence in Changes:
•	Developers can confidently make changes or refactor existing code knowing that the existing tests will catch any regressions or unintended side effects.
e.	Reduced Debugging Time:
•	TDD helps minimize debugging time by identifying issues at the unit level before they propagate to higher levels of the application.

2.	What steps do I do to implement TDD?
a.	Write a Failing Test:
•	Start by writing a unit test that specifies the behavior or functionality you want to implement.
b.	Write Minimal Production Code:
•	Write the minimum amount of code necessary to make the failing test pass. This often involves implementing the simplest solution to satisfy the test.
c.	Run the Test:
•	Execute the test and verify that it fails as expected due to the absence of the functionality being tested.
d.	Refactor Code (if necessary):
•	Refactor the code to improve its design and maintainability while ensuring that all existing tests still pass.
e.	Repeat:
•	Repeat the process for each new feature or functionality, continuously iterating between writing failing tests, writing production code, and refactoring.

3.	What tools or software can I use to do unit testing?
a.	JUnit (Java):
•	JUnit is a popular unit testing framework for Java applications, providing annotations and assertion methods for writing and executing tests.
b.	pytest (Python):
•	pytest is a flexible and powerful testing framework for Python, offering features such as fixtures, parameterization, and built-in support for writing assertions.
c.	RSpec (Ruby):
•	RSpec is a behavior-driven development (BDD) framework for Ruby, designed to make writing and executing tests more expressive and readable.
d.	NUnit (C#/.NET):
•	NUnit is a unit testing framework for .NET applications, offering features such as parameterized tests, assertions, and test fixtures.
e.	Mocha (JavaScript):
•	Mocha is a feature-rich JavaScript testing framework that supports both asynchronous and synchronous testing styles, making it suitable for testing Node.js applications.
